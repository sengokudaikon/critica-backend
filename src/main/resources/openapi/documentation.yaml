openapi: "3.0.3"
info:
  title: "critica_backend API"
  description: "critica_backend API"
  version: "1.0.0"
servers:
- url: "https://critica_backend"
paths:
  /api/health:
    get:
      description: "Healthy application"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Healthy"
  /api/admin/users/{userId}/promote:
    post:
      description: "Promote user to host"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User promoted to host"
  /api/admin/users/{userId}/reject:
    post:
      description: "Reject user promotion"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User promotion rejected"
  /api/admin/users/requesting-promotion:
    get:
      description: "See users requesting promotion"
      responses:
        
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserResponse"
  /api/auth/register:
    post:
      description: "Register a new user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Create"
        required: true
  /api/auth/signIn:
    post:
      description: "Sign in as a user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignIn"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
  /api/auth/userExists:
    post:
      description: "Check if user exists"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Exists"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
  /api/club/{clubId}:
    get:
      description: "Get club by id"
      parameters:
      - name: "clubId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClubQuery"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClubResponse"
  /api/club/{clubId}/createLobby:
    post:
      description: "Create a lobby in a club"
      parameters:
      - name: "clubId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClubQuery"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LobbyResponse"
  /api/club/{clubId}/games:
    get:
      description: "Get games in a club"
      parameters:
      - name: "clubId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClubQuery"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/GameResponse"
  /api/club/{clubId}/join:
    put:
      description: "Join a club"
      parameters:
      - name: "clubId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClubMembershipQuery"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClubResponse"
  /api/club/{clubId}/leave:
    put:
      description: "Leave a club"
      parameters:
      - name: "clubId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClubMembershipQuery"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClubResponse"
  /api/club/{clubId}/lobbies:
    get:
      description: "See lobbies in a club"
      parameters:
      - name: "clubId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClubQuery"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LobbyResponse"
  /api/club/{clubId}/members:
    get:
      description: "See members in a club"
      parameters:
      - name: "clubId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClubQuery"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserResponse"
  /api/club/{id}/rating:
    get:
      description: "See club rating"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RatingResponse"
  /api/club/{id}/rating/day/{day}:
    get:
      description: "See club rating for a day"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "day"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RatingResponse"
  /api/club/{id}/rating/month/{month}:
    get:
      description: "See club rating for a month"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "month"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RatingResponse"
  /api/club/{id}/rating/season:
    get:
      description: "See club rating for a season"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RatingResponse"
  /api/club/{id}/rating/week/{week}:
    get:
      description: "See club rating for a week"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "week"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RatingResponse"
  /api/club/{id}/rating/year/{year}:
    get:
      description: "See club rating for a year"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "year"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RatingResponse"
  /api/club/{clubId}/update:
    put:
      description: "Update club info"
      parameters:
      - name: "clubId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Update"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClubResponse"
  /api/club/create:
    post:
      description: "Create a club"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Create"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClubResponse"
  /api/club/list:
    get:
      description: "Get list of clubs"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ClubResponse"
  /api/game/{id}:
    get:
      description: "Get game by id"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameResponse"
  /api/game/{id}/addBonus/{seat}:
    put:
      description: "Add bonus to player by seat"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "seat"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
  /api/game/{id}/addFoul/{seat}:
    put:
      description: "Add foul to player by seat"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "seat"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
  /api/game/{id}/addOPW/{seat}:
    put:
      description: "Add opposite party win to game by seat"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "seat"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameResponse"
  /api/game/{id}/addPlayer:
    put:
      description: "Add player to game by name"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "playerName"
        in: "path"
        required: true
        schema:
          type: "string"
  /api/game/{id}/addPlayer/{playerId}:
    put:
      description: "Add player to game by id"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "playerId"
        in: "path"
        required: true
        schema:
          type: "string"
  /api/game/{id}/finish:
    post:
      description: "Finish game by id"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
                enum:
                - "CITIZEN"
                - "MAFIA"
                - "DON"
                - "DETECTIVE"
  /api/game/{id}/host/{hostId}:
    put:
      description: "Assign host to game by id"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "hostId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameResponse"
  /api/game/{id}/removePlayer/{playerId}:
    put:
      description: "Remove player from game by id"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "playerId"
        in: "path"
        required: true
        schema:
          type: "string"
  /api/game/{id}/start:
    post:
      description: "Start game"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
  /api/game/{id}/startDay/{day}:
    put:
      description: "Start day"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "day"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameResponse"
  /api/game/{id}/startNight/{night}:
    put:
      description: "Start night"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "night"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameResponse"
  /api/game/list:
    get:
      description: "Get all games"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/GameResponse"
  /api/lobby/{lobbyId}:
    get:
      description: "Get lobby by id"
      parameters:
      - name: "lobbyId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LobbyResponse"
  /api/lobby/{lobbyId}/addGame:
    put:
      description: "Add game to lobby"
      parameters:
      - name: "lobbyId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LobbyResponse"
  /api/lobby/{lobbyId}/addPlayer:
    put:
      description: "Add player by name to lobby"
      parameters:
      - name: "lobbyId"
        in: "path"
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: "playerName"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LobbyResponse"
  /api/lobby/{lobbyId}/addPlayer/{playerId}:
    put:
      description: "Add player to lobby"
      parameters:
      - name: "lobbyId"
        in: "path"
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: "playerId"
        in: "path"
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LobbyResponse"
  /api/lobby/{lobbyId}/addTemporaryPlayer:
    put:
      description: "Add temporary player"
      parameters:
      - name: "lobbyId"
        in: "path"
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: "playerName"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LobbyResponse"
  /api/lobby/{lobbyId}/delete:
    put:
      description: "Delete lobby"
      parameters:
      - name: "lobbyId"
        in: "path"
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "204":
          description: "No Content"
          content:
            application/json:
              schema:
                type: "object"
  /api/lobby/{lobbyId}/games:
    get:
      description: "Get games in lobby"
      parameters:
      - name: "lobbyId"
        in: "path"
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/GameResponse"
  /api/lobby/{lobbyId}/players:
    get:
      description: "Get players in lobby"
      parameters:
      - name: "lobbyId"
        in: "path"
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PlayerResponse"
  /api/lobby/{lobbyId}/removeGame/{gameId}:
    put:
      description: "Remove game from lobby"
      parameters:
      - name: "lobbyId"
        in: "path"
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: "gameId"
        in: "path"
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LobbyResponse"
  /api/lobby/{lobbyId}/removePlayer:
    put:
      description: "Remove player from lobby"
      parameters:
      - name: "lobbyId"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "playerName"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LobbyResponse"
  /api/lobby/{lobbyId}/removePlayer/{playerId}:
    put:
      description: "Remove player from lobby"
      parameters:
      - name: "lobbyId"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "playerId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LobbyResponse"
  /api/lobby/list:
    get:
      description: "Get all lobbies"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LobbyResponse"
  /api/player:
    get:
      description: "Get current player info"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerResponse"
  /api/player/{id}:
    get:
      description: "Get player by id"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerResponse"
  /api/player/{name}:
    get:
      description: "Get player by name"
      parameters:
      - name: "name"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerResponse"
  /api/player/enterGame/{id}:
    get:
      description: "Enter game"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
  /api/player/enterLobby/{id}:
    get:
      description: "Enter lobby"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
  /api/player/leaveGame:
    get:
      description: "Leave current game"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LobbyQuery"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
  /api/player/leaveLobby/{id}:
    get:
      description: "Leave lobby"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LobbyQuery"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
  /api/stage/{id}/bestMove/{seat}:
    put:
      description: "Assign best move to player"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: "seat"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameResponse"
  /api/stage/{nightId}/detective/{seat}:
    put:
      description: "Detective checks"
      parameters:
      - name: "nightId"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "seat"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StageQuery"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameResponse"
  /api/stage/{nightId}/don/{seat}:
    put:
      description: "Don checks for detective"
      parameters:
      - name: "nightId"
        in: "path"
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: "seat"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StageQuery"
        required: true
      responses:
        
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameResponse"
  /api/stage/{stageId}/finish:
    put:
      description: "Finish stage"
      parameters:
      - name: "stageId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameResponse"
  /api/stage/{stageId}/next:
    put:
      description: "Next stage"
      parameters:
      - name: "stageId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameResponse"
  /api/stage/{dayId}/nominate/{candidate}:
    put:
      description: "Nominate candidate for voting"
      parameters:
      - name: "dayId"
        in: "path"
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: "candidate"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StageQuery"
        required: true
      responses:
        
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameResponse"
  /api/stage/{stageId}/prev:
    put:
      description: "Previous stage"
      parameters:
      - name: "stageId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StageQuery"
        required: true
      responses:
        
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameResponse"
  /api/stage/{dayId}/remove/{candidate}:
    put:
      description: "Remove candidate from voting"
      parameters:
      - name: "dayId"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "candidate"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StageQuery"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameResponse"
  /api/stage/{nightId}/shot/{seat}:
    put:
      description: "Shot candidate"
      parameters:
      - name: "nightId"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "seat"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StageQuery"
        required: true
      responses:
        
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameResponse"
  /api/stage/{dayId}/vote:
    put:
      description: "Vote for candidate"
      parameters:
      - name: "dayId"
        in: "path"
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: "candidate"
        in: "query"
        required: true
        schema:
          type: "integer"
          format: "int32"
      - name: "voter"
        in: "query"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameResponse"
  /api/user/settings:
    get:
      description: "Get user settings"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettingsResponse"
  /api/user/settings/change-language:
    post:
      description: "Change language"
      requestBody:
        content:
          text/plain:
            schema:
              type: "string"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettingsResponse"
  /api/user/settings/change-public-visibility:
    post:
      description: "Change public visibility"
      requestBody:
        content:
          application/json:
            schema:
              type: "boolean"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettingsResponse"
  /api/user/settings/change-push-notifications:
    post:
      description: "Change push notifications settings"
      requestBody:
        content:
          application/json:
            schema:
              type: "boolean"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettingsResponse"
  /api/user/settings/request-promotion:
    post:
      description: "Request promotion to host"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettingsResponse"
  /api/user/statistics:
    get:
      description: "Get user statistics"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RatingResponse"
components:
  securitySchemes:
    FirebaseToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserResponse:
      type: "object"
      properties:
        id:
          type: "string"
        playerName:
          type: "string"
        email:
          type: "string"
    Create:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
        country:
          type: "string"
        city:
          type: "string"
        address:
          type: "string"
        creatorId:
          $ref: "#/components/schemas/UUID"
        ruleSet:
          type: "string"
        logo:
          type: "string"
    SignIn:
      type: "object"
      properties:
        email:
          type: "string"
    Exists:
      type: "object"
      properties:
        email:
          type: "string"
    UUID:
      type: "string"
    ClubQuery:
      type: "object"
      properties:
        id:
          $ref: "#/components/schemas/UUID"
    PlayerResponse:
      type: "object"
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        seat:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        role:
          type: "string"
          enum:
          - "CITIZEN"
          - "MAFIA"
          - "DON"
          - "DETECTIVE"
        status:
          type: "string"
          enum:
          - "WAITING"
          - "INGAME"
          - "ALIVE"
          - "DEAD"
          - "REMOVED"
          - "OPW"
        inGame:
          type: "boolean"
        bestMove:
          type: "integer"
          format: "int32"
        bonusPoints:
          type: "integer"
          format: "int32"
    StageResponse:
      type: "object"
      properties:
        type:
          type: "string"
    DayVoteResponse:
      type: "object"
      properties:
        dayNumber:
          type: "integer"
          format: "int32"
        target:
          $ref: "#/components/schemas/PlayerResponse"
        player:
          $ref: "#/components/schemas/PlayerResponse"
    GameResponse:
      type: "object"
      properties:
        id:
          type: "string"
        date:
          type: "string"
        host:
          $ref: "#/components/schemas/PlayerResponse"
        players:
          type: "array"
          items:
            $ref: "#/components/schemas/PlayerResponse"
        currentStage:
          $ref: "#/components/schemas/StageResponse"
        nominates:
          type: "array"
          items:
            $ref: "#/components/schemas/PlayerResponse"
        votes:
          type: "array"
          items:
            $ref: "#/components/schemas/DayVoteResponse"
        mafiaShot:
          $ref: "#/components/schemas/PlayerResponse"
        detectiveCheck:
          $ref: "#/components/schemas/PlayerResponse"
        donCheck:
          $ref: "#/components/schemas/PlayerResponse"
        playersEliminated:
          type: "array"
          items:
            $ref: "#/components/schemas/PlayerResponse"
        bestMove:
          type: "array"
          items:
            $ref: "#/components/schemas/PlayerResponse"
    LobbyResponse:
      type: "object"
      properties:
        id:
          type: "string"
        date:
          type: "string"
        creator:
          type: "string"
        games:
          type: "array"
          items:
            $ref: "#/components/schemas/GameResponse"
        players:
          type: "array"
          items:
            $ref: "#/components/schemas/PlayerResponse"
    ClubResponse:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        creator:
          $ref: "#/components/schemas/UserResponse"
        members:
          type: "array"
          items:
            $ref: "#/components/schemas/UserResponse"
        lobbies:
          type: "array"
          items:
            $ref: "#/components/schemas/LobbyResponse"
        games:
          type: "array"
          items:
            $ref: "#/components/schemas/GameResponse"
        createdAt:
          type: "string"
        updatedAt:
          type: "string"
        country:
          type: "string"
        city:
          type: "string"
        address:
          type: "string"
        logo:
          type: "string"
        description:
          type: "string"
        ruleSet:
          type: "string"
    ClubMembershipQuery:
      type: "object"
      properties:
        userId:
          $ref: "#/components/schemas/UUID"
    RoleResponse:
      type: "object"
      properties:
        id:
          type: "string"
        role:
          type: "string"
        gamesWon:
          type: "integer"
          format: "int32"
        gamesTotal:
          type: "integer"
          format: "int32"
        bonusPoints:
          type: "integer"
          format: "int32"
    RatingResponse:
      type: "object"
      properties:
        id:
          type: "string"
        userId:
          type: "string"
        totalPoints:
          type: "integer"
          format: "int32"
        bonusPoints:
          type: "integer"
          format: "int32"
        malusPoints:
          type: "integer"
          format: "int32"
        bestMovePoints:
          type: "integer"
          format: "int32"
        roleStatistics:
          type: "array"
          items:
            $ref: "#/components/schemas/RoleResponse"
    Update:
      type: "object"
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        name:
          type: "string"
        description:
          type: "string"
        country:
          type: "string"
        city:
          type: "string"
        address:
          type: "string"
        ruleSet:
          type: "string"
        logo:
          type: "string"
    GameQuery:
      type: "object"
      properties:
        hostId:
          $ref: "#/components/schemas/UUID"
        gameId:
          $ref: "#/components/schemas/UUID"
    PlayerQuery:
      type: "object"
      properties:
        playerId:
          $ref: "#/components/schemas/UUID"
    LobbyQuery:
      type: "object"
      properties:
        lobbyId:
          $ref: "#/components/schemas/UUID"
    PlayerNameQuery:
      type: "object"
      properties:
        playerName:
          type: "string"
    StackTraceElement:
      type: "object"
      properties:
        classLoaderName:
          type: "string"
        moduleName:
          type: "string"
        moduleVersion:
          type: "string"
        methodName:
          type: "string"
        fileName:
          type: "string"
        lineNumber:
          type: "integer"
          format: "int32"
    StageQuery:
      type: "object"
      properties:
        id:
          $ref: "#/components/schemas/UUID"
    UserSettingsResponse:
      type: "object"
      properties:
        id:
          type: "string"
        emailConfirmed:
          type: "boolean"
        publicVisibility:
          type: "boolean"
        pushNotificationsEnabled:
          type: "boolean"
        language:
          type: "string"
        promoted:
          type: "boolean"
    Error:
      type: "object"
      properties:
        status:
          type: "integer"
          format: "int32"
          example: 400
        message:
          type: "string"
          description: "A description of the error."
          example: "Invalid ID"
      required:
        - "status"
        - "message"
  responses:
    201:
      description: "The resource was successfully created"
      schema:
        type: "object"
        properties:
          status:
            type: "integer"
            format: "int32"
            example: 201
          message:
            type: "string"
            description: "A description of the successful creation."
            example: "OK"
        required:
          - "status"
          - "message"
    204:
      description: "The resource was successfully updated"
      schema:
        type: "object"
        properties:
          status:
            type: "integer"
            format: "int32"
            example: 204
        required:
          - "status"
    400:
      description: "Malformed data or otherwise invalid request"
      schema:
        $ref: "#/components/schemas/Error"
    404:
      description: "The requested component was not found"
      schema:
        $ref: "#/components/schemas/Error"
    500:
      description: "An internal server error occurred"
      schema:
        $ref: "#/components/schemas/Error"
    403:
      description: "The user does not have the required permissions to access this resource"
      schema:
        $ref: "#/components/schemas/Error"
    401:
      description: "The user is not authenticated"
      schema:
        $ref: "#/components/schemas/Error"